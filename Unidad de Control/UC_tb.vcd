$date
	Tue Nov 05 10:34:40 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module UC_tb $end
$var wire 2 ! resSrc [1:0] $end
$var wire 1 " regWrite $end
$var wire 1 # pcSrc $end
$var wire 1 $ memWrite $end
$var wire 2 % immSrc [1:0] $end
$var wire 1 & branch $end
$var wire 1 ' aluSrc $end
$var wire 3 ( ALUcontrol [2:0] $end
$var reg 3 ) f3 [2:0] $end
$var reg 7 * f7 [6:0] $end
$var reg 7 + op [6:0] $end
$var reg 1 , zero $end
$scope module uut $end
$var wire 3 - f3 [2:0] $end
$var wire 7 . f7 [6:0] $end
$var wire 7 / op [6:0] $end
$var wire 1 # pcSrc $end
$var wire 1 , zero $end
$var wire 1 " regWrite $end
$var wire 1 $ memWrite $end
$var wire 1 0 jump $end
$var wire 2 1 immSrc [1:0] $end
$var wire 1 & branch $end
$var wire 1 ' aluSrc $end
$var wire 2 2 ResultSrc [1:0] $end
$var wire 3 3 ALUcontrol [2:0] $end
$var wire 2 4 ALUOp_wire [1:0] $end
$scope module alu_decoder $end
$var wire 3 5 f3 [2:0] $end
$var wire 7 6 f7 [6:0] $end
$var wire 7 7 op [6:0] $end
$var wire 2 8 aluOp [1:0] $end
$var reg 3 9 aluControl [2:0] $end
$upscope $end
$scope module main_decoder $end
$var wire 7 : op [6:0] $end
$var reg 2 ; ALUOp [1:0] $end
$var reg 1 ' ALUSrc $end
$var reg 1 0 Jump $end
$var reg 2 < ResultSrc [1:0] $end
$var reg 1 & branch $end
$var reg 2 = immSrc [1:0] $end
$var reg 1 $ memWrite $end
$var reg 1 " regWrite $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
00
b0 /
b0 .
b0 -
0,
b0 +
b0 *
b0 )
b0 (
0'
0&
b0 %
0$
0#
0"
b0 !
$end
#10000
b1 *
b1 .
b1 6
b10 )
b10 -
b10 5
b1 +
b1 /
b1 7
b1 :
#20000
1,
b0 *
b0 .
b0 6
b100 )
b100 -
b100 5
b10 +
b10 /
b10 7
b10 :
#30000
0,
b1 *
b1 .
b1 6
b101 )
b101 -
b101 5
b100 +
b100 /
b100 7
b100 :
#40000
